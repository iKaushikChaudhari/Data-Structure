#include <stdio.h>
#include <stdlib.h>
struct Node
{
    int Data;
    struct Node *Next;
};
struct Node *Head = NULL;

void CreateList(void)
{
    struct Node *ptr, *last;//ptr and last are temp varible to store the 
    int x, m;
    do
    {
        ptr = (struct Node *)malloc(sizeof(struct Node));//Data is store inside the Heap.
        printf("Enter the Data :");
        scanf("%d", &m);
        ptr->Data = m;
        ptr->Next = NULL;
        if (Head == NULL)
        {
            Head = ptr;//Head store fix address of the first node
        }
        else
        {
            last = Head;
            while (last->Next != NULL)//Loop iterate all the address of the next node
            {
                last = last->Next; 
            }
            last->Next = ptr; // Address of the present node is store into the previous of Next so two nodes are connected
        }
        printf("Continue (0):");
        scanf("%d", &x);

    } while (x == 0);
}
void DisplayList(struct Node *p)
{

    while (p != NULL) // Last next node contain null untill this NULL .
    {
        printf("%d \t", p->Data);
        p = p->Next; // After the first node completed that first Node Next will give to p
    }
}
void SearchList(struct Node *p, int key)
{
    int Flag = 0;
    while (p != NULL)
    {
        if (key == p->Data)
        {
            Flag = 1;
            break;
        }
        p = p->Next;
    }
    if (Flag == 1)
    {
        printf("Data is Found");
    }
    else
    {
        printf("Data is not Found");
    }
}
void InsertList(struct Node *p, int place, int element)
{
    struct Node *x; // Temp Variable
    x = p;
    int count = 1;
    while (p != NULL)
    {
        if (count == place) // Count the Node that we check.
        {
            struct Node *New; // Create a New Node to Store the new Data
            New = (struct Node *)malloc(sizeof(struct Node));
            New->Data = element;
            x->Next = New; // New Node Address Store inside the Privous Node
            New->Next = p; // Place position Node Address given to the New Node
        }
        x = p;
        p = p->Next;
        count++;
    }
}
void DeleteList(struct Node *p, int key)
{
    struct Node *x;
    x = p; // x take the previous node address 
    while (p != NULL)
    {
        if (key == p->Data)
        {
            x->Next = p->Next;
            p->Next = NULL;
            free(p);
            break;
        }
        x = p; 
        p = p->Next;
    }
}
int main()
{
    struct Node *temp;
    int key, place, choice,c;

    do{
    printf("<-------Menu----->\n\n1)Create List\n2)Display List\n3)Insert List\n4)Search List\n5)Delete List\n");
    scanf("%d", &choice);
    switch (choice)
    {
    case 1:
        CreateList();
        break;
    case 2:
        DisplayList(Head);
        break;
    case 3:
        printf("Key :");
        scanf("%d", &key);
        printf("Place :");
        scanf("%d", &place);
        InsertList(Head, place, key);
        break;
    case 4:
        printf("Key :");
        scanf("%d", &key);
        SearchList(Head, key);
        break;

    case 5:
        printf("Key :");
        scanf("%d", &key);
        DeleteList(Head, key);
        break;
    default:
        printf("Choice the Correct Option.");
        break;
    }
    printf("\nIf you want to continue  this menu (press 1) :\n");
    scanf("%d",&c);
    }while(c==1);
   
    return 0;
}
